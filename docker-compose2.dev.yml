version: '3.8'

services:
  db:
    image: postgres:15
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pyspur}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: bash /pyspur/backend/entrypoint.sh
    env_file:
      - .env
    volumes:
      - .:/pyspur
      - pyspur_data:/pyspur/backend/data
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`46.165.200.49`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.backend.entrypoints=web,websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    command: npm run dev
    env_file:
      - .env
    volumes:
      - .:/pyspur
      - /pyspur/frontend/node_modules
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`46.165.200.49`)"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

volumes:
  postgres_data:
  pyspur_data:

networks:
  default:
    external:
      name: dokploy-network
